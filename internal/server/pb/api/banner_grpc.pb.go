// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BannersRotationClient is the client API for BannersRotation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BannersRotationClient interface {
	AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	RemoveBanner(ctx context.Context, in *RemoveBannerRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	ClickEvent(ctx context.Context, in *ClickEventRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	GetBanner(ctx context.Context, in *GetBannerRequest, opts ...grpc.CallOption) (*BannerResponse, error)
	CreateBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResponse, error)
	CreateSlot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*SlotResponse, error)
	CreateSocialDemo(ctx context.Context, in *SocialDemoRequest, opts ...grpc.CallOption) (*SocialDemoResponse, error)
}

type bannersRotationClient struct {
	cc grpc.ClientConnInterface
}

func NewBannersRotationClient(cc grpc.ClientConnInterface) BannersRotationClient {
	return &bannersRotationClient{cc}
}

func (c *bannersRotationClient) AddBanner(ctx context.Context, in *AddBannerRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/banner.BannersRotation/AddBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotationClient) RemoveBanner(ctx context.Context, in *RemoveBannerRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/banner.BannersRotation/RemoveBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotationClient) ClickEvent(ctx context.Context, in *ClickEventRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/banner.BannersRotation/ClickEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotationClient) GetBanner(ctx context.Context, in *GetBannerRequest, opts ...grpc.CallOption) (*BannerResponse, error) {
	out := new(BannerResponse)
	err := c.cc.Invoke(ctx, "/banner.BannersRotation/GetBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotationClient) CreateBanner(ctx context.Context, in *BannerRequest, opts ...grpc.CallOption) (*BannerResponse, error) {
	out := new(BannerResponse)
	err := c.cc.Invoke(ctx, "/banner.BannersRotation/CreateBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotationClient) CreateSlot(ctx context.Context, in *SlotRequest, opts ...grpc.CallOption) (*SlotResponse, error) {
	out := new(SlotResponse)
	err := c.cc.Invoke(ctx, "/banner.BannersRotation/CreateSlot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bannersRotationClient) CreateSocialDemo(ctx context.Context, in *SocialDemoRequest, opts ...grpc.CallOption) (*SocialDemoResponse, error) {
	out := new(SocialDemoResponse)
	err := c.cc.Invoke(ctx, "/banner.BannersRotation/CreateSocialDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BannersRotationServer is the server API for BannersRotation service.
// All implementations must embed UnimplementedBannersRotationServer
// for forward compatibility
type BannersRotationServer interface {
	AddBanner(context.Context, *AddBannerRequest) (*MessageResponse, error)
	RemoveBanner(context.Context, *RemoveBannerRequest) (*MessageResponse, error)
	ClickEvent(context.Context, *ClickEventRequest) (*MessageResponse, error)
	GetBanner(context.Context, *GetBannerRequest) (*BannerResponse, error)
	CreateBanner(context.Context, *BannerRequest) (*BannerResponse, error)
	CreateSlot(context.Context, *SlotRequest) (*SlotResponse, error)
	CreateSocialDemo(context.Context, *SocialDemoRequest) (*SocialDemoResponse, error)
	mustEmbedUnimplementedBannersRotationServer()
}

// UnimplementedBannersRotationServer must be embedded to have forward compatible implementations.
type UnimplementedBannersRotationServer struct {
}

func (UnimplementedBannersRotationServer) AddBanner(context.Context, *AddBannerRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedBannersRotationServer) RemoveBanner(context.Context, *RemoveBannerRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBanner not implemented")
}
func (UnimplementedBannersRotationServer) ClickEvent(context.Context, *ClickEventRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClickEvent not implemented")
}
func (UnimplementedBannersRotationServer) GetBanner(context.Context, *GetBannerRequest) (*BannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanner not implemented")
}
func (UnimplementedBannersRotationServer) CreateBanner(context.Context, *BannerRequest) (*BannerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanner not implemented")
}
func (UnimplementedBannersRotationServer) CreateSlot(context.Context, *SlotRequest) (*SlotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSlot not implemented")
}
func (UnimplementedBannersRotationServer) CreateSocialDemo(context.Context, *SocialDemoRequest) (*SocialDemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSocialDemo not implemented")
}
func (UnimplementedBannersRotationServer) mustEmbedUnimplementedBannersRotationServer() {}

// UnsafeBannersRotationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BannersRotationServer will
// result in compilation errors.
type UnsafeBannersRotationServer interface {
	mustEmbedUnimplementedBannersRotationServer()
}

func RegisterBannersRotationServer(s grpc.ServiceRegistrar, srv BannersRotationServer) {
	s.RegisterService(&BannersRotation_ServiceDesc, srv)
}

func _BannersRotation_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotationServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner.BannersRotation/AddBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotationServer).AddBanner(ctx, req.(*AddBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotation_RemoveBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotationServer).RemoveBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner.BannersRotation/RemoveBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotationServer).RemoveBanner(ctx, req.(*RemoveBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotation_ClickEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClickEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotationServer).ClickEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner.BannersRotation/ClickEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotationServer).ClickEvent(ctx, req.(*ClickEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotation_GetBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotationServer).GetBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner.BannersRotation/GetBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotationServer).GetBanner(ctx, req.(*GetBannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotation_CreateBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotationServer).CreateBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner.BannersRotation/CreateBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotationServer).CreateBanner(ctx, req.(*BannerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotation_CreateSlot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotationServer).CreateSlot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner.BannersRotation/CreateSlot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotationServer).CreateSlot(ctx, req.(*SlotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BannersRotation_CreateSocialDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SocialDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BannersRotationServer).CreateSocialDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banner.BannersRotation/CreateSocialDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BannersRotationServer).CreateSocialDemo(ctx, req.(*SocialDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BannersRotation_ServiceDesc is the grpc.ServiceDesc for BannersRotation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BannersRotation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banner.BannersRotation",
	HandlerType: (*BannersRotationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBanner",
			Handler:    _BannersRotation_AddBanner_Handler,
		},
		{
			MethodName: "RemoveBanner",
			Handler:    _BannersRotation_RemoveBanner_Handler,
		},
		{
			MethodName: "ClickEvent",
			Handler:    _BannersRotation_ClickEvent_Handler,
		},
		{
			MethodName: "GetBanner",
			Handler:    _BannersRotation_GetBanner_Handler,
		},
		{
			MethodName: "CreateBanner",
			Handler:    _BannersRotation_CreateBanner_Handler,
		},
		{
			MethodName: "CreateSlot",
			Handler:    _BannersRotation_CreateSlot_Handler,
		},
		{
			MethodName: "CreateSocialDemo",
			Handler:    _BannersRotation_CreateSocialDemo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/banner.proto",
}
